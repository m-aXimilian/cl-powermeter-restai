(in-package :cl.powermeter.restapi/tests)

(def-suite* restapi.main/powerclaculations
  :in restapi.main
  :description "Power calculation tests.")

(def-test calling-api-once-yields-no-power ()
  (with-fixture setup-power-calculation-alist ()
    (let* ((meter-reading-mock (make-instance 'meter-request-mock :server-ip *server-host-ip*))
           (calculator (make-instance 'power-calculator :meter-api meter-reading-mock)))
      (calculate-power calculator (car (first *uid-obis-code-alist*)))
      (is-false (power (power-calculation-with-uid (car (first *uid-obis-code-alist*))))))))

(def-test subsequent-api-calls-w/o-break-yield-no-power ()
  (with-fixture setup-power-calculation-alist ()
    (let* ((meter-reading-mock (make-instance 'meter-request-mock :server-ip *server-host-ip*))
           (calculator (make-instance 'power-calculator :meter-api meter-reading-mock)))
      (calculate-power calculator (car (first *uid-obis-code-alist*)))
      (calculate-power calculator (car (first *uid-obis-code-alist*)))
      (is-false (power (power-calculation-with-uid (car (first *uid-obis-code-alist*))))))))

(def-test uncalled-uids-remain-unset ()
  (with-fixture setup-power-calculation-alist ()
    (let* ((meter-reading-mock (make-instance 'meter-request-mock :server-ip *server-host-ip*))
           (calculator (make-instance 'power-calculator :meter-api meter-reading-mock)))
      (calculate-power calculator (car (first *uid-obis-code-alist*)))
      (sleep 1)
      (calculate-power calculator (car (first *uid-obis-code-alist*)))
      (is (power (power-calculation-with-uid (car (first *uid-obis-code-alist*)))))
      (is-false (power (power-calculation-with-uid (car (second *uid-obis-code-alist*))))))))

(def-test subsequent-api-calls-constant-power ()
  (with-fixture setup-power-calculation-alist ()
    (let* ((meter-reading-mock (make-instance 'meter-request-mock-constant-power :server-ip *server-host-ip*))
           (calculator (make-instance 'power-calculator :meter-api meter-reading-mock)))
      (calculate-power calculator (car (first *uid-obis-code-alist*)))
      (sleep (sleep-time meter-reading-mock))
      (calculate-power calculator (car (first *uid-obis-code-alist*)))
      (is (= (* 1 *meter-transformer-ratio*) (power (power-calculation-with-uid (car (first *uid-obis-code-alist*)))))))))

(def-test subsequent-api-calls-constant-power-settable ()
  (with-fixture setup-power-calculation-alist ()
    (let* ((meter-reading-mock (make-instance 'meter-request-mock-constant-power :server-ip *server-host-ip* :target-power 5))
           (calculator (make-instance 'power-calculator :meter-api meter-reading-mock)))
      (calculate-power calculator (car (first *uid-obis-code-alist*)))
      (sleep (sleep-time meter-reading-mock))
      (calculate-power calculator (car (first *uid-obis-code-alist*)))
      (is-false (= 1 (power (power-calculation-with-uid (car (first *uid-obis-code-alist*))))))
      (is (= (* 5 *meter-transformer-ratio*) (power (power-calculation-with-uid (car (first *uid-obis-code-alist*)))))))))

(def-test static-power-meter-reads-same-power-on-all-keys ()
  (with-fixture setup-power-calculation-alist ()
    (let* ((meter-reading-mock (make-instance 'meter-request-mock-constant-power :server-ip *server-host-ip* :target-power 5))
           (calculator (make-instance 'power-calculator :meter-api meter-reading-mock :query-frequency 1.0)))
      (funcall (parser calculator) calculator)
      (sleep (/ 1.0 (query-frequency calculator)))
      (funcall (parser calculator) calculator)
      (dolist (key *uid-obis-code-alist*)
        (is (= (* 5 *meter-transformer-ratio*)
               (power (power-calculation-with-uid (car key)))))))))
